@using System.Linq
@using BlazorApp.Client.Configuration.Datagrid
@using Alignment = BlazorApp.Client.Configuration.Datagrid.Alignment
@typeparam TItem
@inject HttpClient HttpClient



<table class="table" is-striped>
    <thead>
        <tr>
            @if (Columns != null)
            {
                foreach (var column in Columns)
                {
                    <th class="@(SetTableAlignment(column))">
                        @column.Caption
                    </th>
                }
            }
        </tr>
    </thead>
    <tbody>
        @if (DataItems != null)
        {
            @foreach (var item in DataItems
                .Skip(Paging.NumOfItemsToSkip(CurrentPageNumber))
                .Take(Paging.NumOfItemsToTake(DataItems.Count())))
            {
                <tr>
                    @if(Columns is null || Columns.Count <= 0) { }
                    else
                    {
                        foreach (var column in Columns)
                        {
                            if (column.Alignment != Alignment.NotSet)
                            {
                                <td align="@column.Alignment.ToString().ToLower()">@FormatItemValue(item, column)</td>
                            }
                            else
                            {
                                <td>@FormatItemValue(item, column)</td>
                            }
                        }
                    }
                
                </tr>
            }
        }
        
    </tbody>
</table>
<div>
    <div>
        @if (Paging != null && Paging.Enabled)
        {
            @if (Paging.CustomPager)
            {
                @CustomPager
            }
            else
            {
                <button class="alert-primary" @onclick="GoToPrevPage">Previous</button>
                <span>&nbsp; Page @CurrentPageNumber of @Paging.MaxPageNumber(DataItems.Count()) &nbsp;</span>
                <button class="alert-primary" @onclick="GoToNextPage">Next</button>
            }
        }
    </div>
</div>


@code {

    [Parameter]
    public int CurrentPageNumber { get; set; } = 1;

    [Parameter]
    public List<TItem> DataItems { get; set; }

    [Parameter]
    public List<ColumnDefinition> Columns { get; set; }

    [Parameter]
    public PagingConfig Paging { get; set; }

    [Parameter]
    public RenderFragment CustomPager { get; set; }

    [Parameter]
    public string SearchString { get; set; }


    public void GoToPrevPage()
    {
        CurrentPageNumber = Paging.PrevPageNumber(CurrentPageNumber);
    }

    public void GoToNextPage()
    {
        CurrentPageNumber = Paging.NextPageNumber(CurrentPageNumber, DataItems.Count());
    }

    public int MaxPageNumber => Paging.MaxPageNumber(DataItems.Count());

    private string SetTableAlignment(ColumnDefinition column)
    {
        string alignment = string.Empty;

        switch (column.Alignment)
        {
            case Alignment.Left:
                alignment = "align-left";
                break;
            case Alignment.Center:
                alignment = "align-center";
                break;
            case Alignment.Right:
                alignment = "align-right";
                break;
            case Alignment.NotSet:
            default:
                alignment = string.Empty;
                break;
        }

        return alignment;
    }

    private string FormatItemValue(TItem item, ColumnDefinition column)
    {
        string value = string.Empty;

        if (!string.IsNullOrWhiteSpace(column.Format) && column.DataType != DataType.NotSet)
        {
            switch (column.DataType)
            {
                case DataType.Date:
                case DataType.DateTime:
                    value = DateTime.Parse(typeof(TItem).GetProperty(column.DataField)?.GetValue(item).ToString()).ToString(column.Format);
                    break;
                case DataType.Boolean:
                    value = bool.Parse(typeof(TItem).GetProperty(column.DataField)?.GetValue(item).ToString()).ToString();
                    break;
                case DataType.Currency:
                    value = Math.Round(double.Parse(typeof(TItem).GetProperty(column.DataField).GetValue(item).ToString()), 2).ToString("c");
                    break;
            }
        }
        else
        {
            return typeof(TItem).GetProperty(column.DataField)?.GetValue(item).ToString();
        }

        return value;
    }
}
