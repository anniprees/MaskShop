@page "/testlist"

@using BlazorApp.Client.Configuration.Datagrid
@using MaskShop.Domain.Products
@using MaskShop.Facade.Products
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject HttpClient HttpClient


<h3>Testing DataGrid</h3>

<br />
<DataGridComponent TItem="Product"
                   DataItems="_productsList"
                   Columns="_columnsDefinition"
                   Paging="@(new PagingConfig {
                               Enabled = true,
                               CustomPager = false,
                               PageSize = 3
                           })"></DataGridComponent>

@code {

    private List<Product> _productsList;
    private List<ProductView> _productsView;
    private HubConnection _hubConnection;
    private List<ColumnDefinition> _columnsDefinition;


    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/ProductHub"))
            .Build();

        _hubConnection.On("ReceiveMessage", () =>
        {
            CallLoadData();
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
        await LoadData();
        DefineColumnDefinitions();
    }

    private void DefineColumnDefinitions()
    {
        if (_columnsDefinition == null)
        {
            _columnsDefinition = new List<ColumnDefinition>();
            _columnsDefinition.AddRange(
                new ColumnDefinition[]{
                    new ColumnDefinition {DataField = "Id", Caption = "Product Id"},
                    new ColumnDefinition {DataField = "Name", Caption = "Product Name"},
                    new ColumnDefinition {DataField = "ProductCategoryId", Caption = "Product Category Id"},
                    new ColumnDefinition {DataField = "From", Caption = "Valid From", Format = "yyyy/MM/dd", DataType = DataType.Date},
                    new ColumnDefinition {DataField = "To", Caption = "Valid To", Format = "yyyy/MM/dd", DataType = DataType.Date},
                }
            );
        }
    }

    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            await LoadData();
        });
    }

    protected async Task LoadData()
    {

        var result = await HttpClient.GetJsonAsync<List<ProductView>>("api/products");
        var aa = new List<Product>();
        result.ForEach(x => aa.Add(ProductViewFactory.Create(x)));
        _productsList = aa;

        StateHasChanged();
    }

    public void Dispose()
    {
        _ = _hubConnection.DisposeAsync();
    }

}