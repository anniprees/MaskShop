@page "/addproduct"

@using BlazorApp.Shared
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<h2>Create Product</h2>
<hr />
<form>
    <div class="row">
        <div class="col-md-8">
            <div class="form-group">
                <label for="Name" class="control-label">Name</label>
                <input form="ProductName" class="form-control" @bind="@product.Name" />
            </div>
            <div class="form-group">
                <label for="ProductCategoryId" class="control-label">Product Category Id</label>
                <input form="ProductCategoryId" class="form-control" @bind="@product.ProductCategoryId" />
            </div>
            <div class="form-group">
                <label for="From" class="control-label">From</label>
                <input form="From" class="form-control" @bind="@product.From" />
            </div>
            <div class="form-group">
                <label for="To" class="control-label">To</label>
                <input form="To" class="form-control" @bind="@product.To" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <input type="button" class="btn btn-success" @onclick="@CreateProduct" value="Save" />
                <input type="button" class="btn btn-danger" @onclick="@Cancel" value="Cancel" />
            </div>
        </div>
    </div>
</form>

@code {
    Product product = new Product();
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/ProductHub"))
            .Build();

        await hubConnection.StartAsync();
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public async Task CreateProduct()
    {
        await HttpClient.PostJsonAsync("api/products", product);
        if (IsConnected) await SendMessage();
    }

    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    void Cancel()
    {
        NavigationManager.NavigateTo("productsList");
    }

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}
