@page "/editproduct/{id}"

@using BlazorApp.Shared
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<h2>Edit Product</h2>
<hr />
<form>
    <div class="row">
        <div class="col-md-8">
            <div class="form-group">
                <label for="Id" class="control-label">Id</label>
                <input form="Id" class="form-control" @bind="@product.Id" />
            </div>
            <div class="form-group">
                <label for="ProductName" class="control-label">Name</label>
                <input form="ProductName" class="form-control" @bind="@product.Name" />
            </div>
            <div class="form-group">
                <label for="ProductCategoryId" class="control-label">Name</label>
                <input form="ProductCategoryId" class="form-control" @bind="@product.ProductCategoryId" />
            </div>
            <div class="form-group">
                <label for="From" class="control-label">From</label>
                <input form="From" class="form-control" @bind="@product.From" />
            </div>
            <div class="form-group">
                <label for="To" class="control-label">To</label>
                <input form="To" class="form-control" @bind="@product.To" />
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <input type="button" class="btn btn-success" @onclick="@UpdateProduct" value="Update" />
                <input type="button" class="btn btn-danger" @onclick="@Cancel" value="Cancel" />
            </div>
        </div>
    </div>
</form>

@code {
    Product product = new Product();
    private HubConnection hubConnection;

    [Parameter]
    public string id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        product = await HttpClient.GetJsonAsync<Product>("api/products/" + id);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/ProductHub"))
            .Build();

        await hubConnection.StartAsync();
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public async Task UpdateProduct()
    {
        await HttpClient.PutJsonAsync("api/products/" + id, product);
        if (IsConnected) await SendMessage();
        NavigationManager.NavigateTo("productlist");
    }

    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    void Cancel()
    {
        NavigationManager.NavigateTo("productlist");
    }

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}
