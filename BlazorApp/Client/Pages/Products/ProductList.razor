@page "/productlist"
@using Microsoft.AspNetCore.Authorization
@using MaskShop.Domain.Products
@using MaskShop.Facade.Products
@using Microsoft.AspNetCore.SignalR.Client

@attribute [Authorize]
@inject NavigationManager NavigationManager
@inject LocalStorage Storage
@inject HttpClient HttpClient

<h2>List of products</h2>

<div class="row mb-3">
    <div class="col-md-7">
        <BSButton Class="btn btn-outline-primary" @onclick="AddProduct">Add New Product</BSButton>
    </div>
</div>
<div class="input-group col-md-5 text-md-right">
    <input name="ProductSearchInput" type="text" class="form-control" placeholder="Product Name" @bind="this.SearchTerm" @onkeyup="SearchBoxKeyPress" />
    <div class="input-group-btn">
        <button name="ProductSearchButton" class="btn btn-default" @onclick="SearchClick">
            <i class="oi oi-magnifying-glass" title="search" aria-hidden="true"></i>
        </button>
    </div>
    <div class="input-group-btn">
        <button name="ProductSearchClear" class="btn btn-default" @onclick="ClearSearch">
            <i class="oi oi-x" title="clear" aria-hidden="true"></i>
        </button>
    </div>
</div>

@if (productsList == null)
{
    <p>Loading...</p>
}
else
{
    <BSTable IsResponsive="true" class="table">
        <thead class="thead-light">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Product Category ID</th>
                <th>From</th>
                <th>To</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in productsList)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Name</td>
                    <td>@product.ProductCategoryId</td>
                    <td>@product.From</td>
                    <td>@product.To</td>
                    <td>
                        <BSButton ButtonType="ButtonType.Link" Color="Color.None" Class="oi oi-eye text-primary" @onclick="@(async () => await ViewProduct(product.Id))"></BSButton>
                        <BSButton ButtonType="ButtonType.Link" Color="Color.None" Class="oi oi-pencil text-warning" @onclick="@(async () => await EditProduct(product.Id))"></BSButton>
                        <BSButton ButtonType="ButtonType.Link" Color="Color.None" Class="oi oi-trash text-danger" @onclick="@(async () => await DeleteProduct(product.Id))"></BSButton>
                    </td>
                </tr>
            }
        </tbody>
    </BSTable>
}

<div>
    <BSModal @bind-IsOpen="@IsAdd" Size="Size.Large" IgnoreEscape="true" IgnoreClickOnBackdrop="true">
        <BSModalHeader @onclick="CloseModal">@ModalTitle</BSModalHeader>
        <BSModalBody>
            <div class="col-md-12">
                <EditForm Model="@Product" OnValidSubmit="@CreateProduct">
                    <div class="form-group">
                        <label for="Id" class="control-label">ID</label>
                        <InputText id="Id" class="form-control" @bind-Value="Product.Id" />
                        <ValidationMessage For="@(() => Product.Id)" />

                        <label for="Name" class="control-label">Name</label>
                        <InputText id="Name" class="form-control" @bind-Value="Product.Name" />
                        <ValidationMessage For="@(() => Product.Name)" />

                        <label for="Product Category" class="control-label">Product Category</label>
                        <InputText id="Product Category" class="form-control" @bind-Value="Product.ProductCategoryId" />
                        <ValidationMessage For="@(() => Product.ProductCategoryId)" />

                        <label for="Valid From" class="control-label">Valid From</label>
                        <InputDate id="Valid From" class="form-control" @bind-Value="Product.ValidFrom" />
                        <ValidationMessage For="@(() => Product.ValidFrom)" />

                        <label for="Valid To" class="control-label">Valid To</label>
                        <InputDate id="Valid To" class="form-control" @bind-Value="Product.ValidTo" />
                        <ValidationMessage For="@(() => Product.ValidTo)" />
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-success">Save</button>
                        <button class="btn btn-primary" @onclick="CloseModal">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </BSModalBody>
    </BSModal>
</div>

<div>
    <BSModal @bind-IsOpen="IsView" Size="Size.Large" IgnoreEscape="true" IgnoreClickOnBackdrop="true">
        <BSModalHeader @onclick="CloseModal">@ModalTitle</BSModalHeader>
        <BSModalBody>
            <div class="col-md-12">
                @if (IsDelete)
                {
                    <BSAlert Color="Color.Danger">Please review carefully before deleting.</BSAlert>
                }
                <hr />
                <h5>Product</h5>
                <hr />
                <BSTable IsResponsive="true" class="table">
                    <tr>
                        <td>Id</td>
                        <td>@Product.Id</td>
                    </tr>
                    <tr>
                        <td>Name</td>
                        <td>@Product.Name</td>
                    </tr>
                    <tr>
                        <td>Product Category</td>
                        <td>@Product.ProductCategoryId</td>
                    </tr>
                    <tr>
                        <td>Valid From</td>
                        <td>@Product.ValidFrom</td>
                    </tr>
                    <tr>
                        <td>Valid To</td>
                        <td>@Product.ValidTo</td>
                    </tr>
                </BSTable>

                <div class="form-group">
                    @if (IsDelete)
                    {
                        <button type="button" class="btn btn-danger" @onclick=@RemoveProduct>Delete</button>
                        <button class="btn btn-primary" @onclick="CloseModal">Cancel</button>
                    }
                    @if (!IsDelete)
                    {
                        <button class="btn btn-primary" @onclick="CloseModal">Back</button>
                    }
                </div>
            </div>
        </BSModalBody>
    </BSModal>
</div>

@code {

    [Parameter]
    public string Page { get; set; } = "1";

    [Parameter]
    public string SearchTerm { get; set; } = string.Empty;

    ProductView[] productsList;
    private HubConnection hubConnection;

    //protected Product[] Products;

    protected Product Product = new Product
    {
        Name = "",
        Id = "",
        ProductCategoryId = "",
    };

    protected string CurrentProductId { get; set; }
    protected string ModalTitle { get; set; }
    protected bool IsAdd { get; set; }
    protected bool IsView { get; set; }
    protected bool IsDelete { get; set; }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/ProductHub"))
            .Build();

        hubConnection.On("ReceiveMessage", () =>
        {
            CallLoadData();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await LoadData();
    }

    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            await LoadData();
        });
    }

    protected async Task LoadData()
    {
        productsList = await HttpClient.GetJsonAsync<ProductView[]>("api/products");
        StateHasChanged();
    }

    protected async Task SearchClick()
    {
        if (string.IsNullOrEmpty(SearchTerm))
        {
            productsList = await HttpClient.GetJsonAsync<ProductView[]>(("api/products/") + "?name=" + SearchTerm);
            return;
        }

        productsList = await HttpClient.GetJsonAsync<ProductView[]>(("api/products/") + "?name=" + SearchTerm);
        StateHasChanged();
    }

    protected async Task SearchBoxKeyPress(KeyboardEventArgs ev)
    {
        if (ev.Key == "Enter")
        {
            await SearchClick();
        }
    }

    protected async Task ClearSearch()
    {
        SearchTerm = string.Empty;
        productsList = await HttpClient.GetJsonAsync<ProductView[]>("api/products/");
        StateHasChanged();
    }

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

    protected void AddProduct()
    {
        this.IsAdd = true;
        this.ModalTitle = "Create product";
    }

    protected async Task ViewProduct(string productId)
    {
        Product = await HttpClient.GetJsonAsync<Product>("api/products/" + productId);
        CurrentProductId = productId;
        this.IsView = true;
        this.ModalTitle = "View product";
    }

    protected async Task EditProduct(string productId)
    {
        Product = await HttpClient.GetJsonAsync<Product>("api/products/" + productId);
        CurrentProductId = productId;
        this.IsAdd = true;
        this.ModalTitle = "Edit product";
    }

    protected async Task DeleteProduct(string productId)
    {
        Product = await HttpClient.GetJsonAsync<Product>("api/products/" + productId);
        CurrentProductId = productId;
        this.IsView = true;
        this.IsDelete = true;
        this.ModalTitle = "Delete product";
    }


    protected async Task CreateProduct()
    {
        if (CurrentProductId == null)
        {
            await HttpClient.SendJsonAsync(HttpMethod.Post, "api/products", Product);
            if (IsConnected) await SendMessage();
        }
        else
        {
            await HttpClient.PutJsonAsync("api/products/" + CurrentProductId, Product);
            if (IsConnected) await SendMessage();
        }
        CloseModal();
        await OnParametersSetAsync();
    }

    protected async Task RemoveProduct()
    {
        await HttpClient.DeleteAsync("api/products/" + CurrentProductId);
        if (IsConnected) await SendMessage();
        CloseModal();
        await OnParametersSetAsync();
    }

    protected void CloseModal()
    {
        Product = new Product
        {
            Name = "",
            Id = "",
            ProductCategoryId = "",
        };
        CurrentProductId = null;
        this.IsAdd = false;
        this.IsView = false;
        this.IsDelete = false;
        StateHasChanged();
    }

    protected void PagerPageChanged(int page)
    {
        NavigationManager.NavigateTo("/productlist/" + page);

    }

}