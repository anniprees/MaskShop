@page "/productlist"

@using BlazorApp.Shared
@using Microsoft.AspNetCore.SignalR.Client

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@attribute [Authorize]

@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<h2>List of products</h2>

<p>>
    <a href="/addproduct">Create New Product</a>
    </p>

@if (productsList == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Product Category Id</th>
                <th>From</th>
                <th>To</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in productsList)
            {
            <tr>
                <td>@product.Id</td>
                <td>@product.Name</td>
                <td>@product.ProductCategoryId</td>
                <td>@product.From</td>
                <td>@product.To</td>
                <td>
                    <a href="/editproduct/@product.Id">Edit</a>
                    <a href="/deleteproduct/@product.Id">Delete</a>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    Product[] productsList;
    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/ProductHub"))
            .Build();

        hubConnection.On("ReceiveMessage", () =>
        {
            CallLoadData();
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        await LoadData();
    }

    private void CallLoadData()
    {
        Task.Run(async () =>
        {
            await LoadData();
        });
    }

    protected async Task LoadData()
    {
        productsList = await HttpClient.GetJsonAsync<Product[]>("api/products");
        StateHasChanged();
    }

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}
