@page "/product/list/{Page}"
@using BlazorApp.Shared
@inject HttpClient Http
@inject LocalStorage Storage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Sotsera.Blazor.Toaster.IToaster Toaster

@if (Storage.GetItem("Transaction") == "modified")
{
    Toaster.Success("Product successfully updated in the system.", "Product Updated");
    Storage.RemoveItem("Transaction");
}

<h1>Products Data</h1>

<div class="row mb-3">
    <div class="col-md-7">
        @if (isLoggedOn())
        {
            <BSButton Class="btn btn-primary" @onclick="AddProduct">Add New Product</BSButton>
        }
    </div>
    <div class="input-group col-md-5 text-md-right">
        <input name="ProductSearchInput" type="text" class="form-control" placeholder="Product Name" @bind="this.SearchTerm" @onkeyup="SearchBoxKeyPress" />
        <div class="input-group-btn">
            <button name="ProductSearchButton" class="btn btn-default" @onclick="SearchClick">
                <i class="oi oi-magnifying-glass" title="search" aria-hidden="true"></i>
            </button>
        </div>
        <div class="input-group-btn">
            <button name="ProductSearchClear" class="btn btn-default" @onclick="ClearSearch">
                <i class="oi oi-x" title="clear" aria-hidden="true"></i>
            </button>
        </div>
    </div>
</div>

@if (Products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <BSTable IsResponsive="true" class='table'>
        <thead class="thead-light">
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>ProductFeatureId</th>
            <th>From</th>
            <th>To</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var product in Products.Results)
        {
            <tr>
                <td>@product.Id</td>
                <td>@product.Name</td>
                <td>@product.ProductCategoryId</td>
                <td>@product.From</td>
                <td>@product.To</td>
                <td>
                    <BSButton ButtonType="ButtonType.Link" Color="Color.None" Class="oi oi-eye text-primary" @onclick="@(async () => await ViewProduct(product.Id))"></BSButton>
                    @if (isLoggedOn())
                    {
                        <BSButton ButtonType="ButtonType.Link" Color="Color.None" Class="oi oi-pencil text-warning" @onclick="@(async () => await UpdateProduct(product.Id))"></BSButton>
                        <BSButton ButtonType="ButtonType.Link" Color="Color.None" Class="oi oi-trash text-danger" @onclick="@(async () => await DeleteProduct(product.Id))"></BSButton>
                    }
                </td>
            </tr>
        }
        </tbody>
    </BSTable>
    <Pager Result=@Products PageChanged=PagerPageChanged />
}

<div>
    <BSModal @bind-IsOpen="@IsAdd" Size="Size.Large" IgnoreEscape="true" IgnoreClickOnBackdrop="true">
        <BSModalHeader @onclick="CloseModal">@ModalTitle</BSModalHeader>
        <BSModalBody>
            <div class="col-md-12">
                <EditForm Model="@product" OnValidSubmit="@CreateProduct">
                    <div class="form-group">
                        <label for="Name" class="control-label">Name</label>
                        <InputText id="Name" class="form-control" @bind-Value="product.Name" />
                        <ValidationMessage For="@(() => product.Name)" />
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-success">Save</button>
                        <button class="btn btn-primary" @onclick="CloseModal">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </BSModalBody>
    </BSModal>
</div>

<div>
    <BSModal @bind-IsOpen="IsView" Size="Size.Large" IgnoreEscape="true" IgnoreClickOnBackdrop="true">
        <BSModalHeader @onclick="CloseModal">@ModalTitle</BSModalHeader>
        <BSModalBody>
            <div class="col-md-12">
                @if (IsDelete)
                {
                    <BSAlert Color="Color.Danger">Please review carefully before deleting.</BSAlert>
                }
                <hr />
                <h5>Product Data</h5>
                <hr />
                <BSTable IsResponsive="true" class="table">
                    <tr>
                        <td>Id</td>
                        <td>@product.Id</td>
                    </tr>
                    <tr>
                        <td>Name</td>
                        <td>@product.Name</td>
                    </tr>
                    <tr>
                        <td>Product Category Id</td>
                        <td>@product.ProductCategoryId</td>
                    </tr>
                    <tr>
                        <td>Valid From</td>
                        <td>@product.From</td>
                    </tr>
                    <tr>
                        <td>Valid To</td>
                        <td>@product.To</td>
                    </tr>
                </BSTable>

                <div class="form-group">
                    @if (IsDelete)
                    {
                        <button type="button" class="btn btn-danger" @onclick="(async () => await RemoveProduct())">Delete</button>
                        <button class="btn btn-primary" @onclick="CloseModal">Cancel</button>
                    }
                    @if (!IsDelete)
                    {
                        <button class="btn btn-primary" @onclick="CloseModal">Back</button>
                    }
                </div>
            </div>
        </BSModalBody>
    </BSModal>
</div>

@code {

    [Parameter]
    public string Page { get; set; } = "1";
    [Parameter]
    public string SearchTerm { get; set; } = string.Empty;

    protected PagedResult<Product> Products;
    protected Product product = new Product
    {
        Name = "",
        Id = "",
        ProductCategoryId = "",
    };

    protected string CurrentProductId { get; set; }
    protected string ModalTitle { get; set; }
    protected bool IsAdd { get; set; }
    protected bool IsView { get; set; }
    protected bool IsDelete { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        Products = await Http.GetJsonAsync<PagedResult<Product>>(Storage.GetItem("environment_uri") + "/product/?name=" + SearchTerm + "&page=" + Page);
    }

    protected bool isLoggedOn()
    {
        return (Storage.GetItem("JWT-Token") != String.Empty && DateTime.Now.Ticks < Convert.ToInt64(Storage.GetItem("JWT-Time-Expire")));
    }

    protected async Task SearchBoxKeyPress(KeyboardEventArgs ev)
    {
        if (ev.Key == "Enter")
        {
            await SearchClick();
        }
    }

    protected async Task SearchClick()
    {
        if (string.IsNullOrEmpty(SearchTerm))
        {
            Products = await Http.GetJsonAsync<PagedResult<Product>>(Storage.GetItem("environment_uri") + "/product/?name=" + SearchTerm + "&page=1");
            return;
        }

        Products = await Http.GetJsonAsync<PagedResult<Product>>(Storage.GetItem("environment_uri") + "/product/?name=" + SearchTerm + "&page=1");
        StateHasChanged();
    }

    protected async Task ClearSearch()
    {
        SearchTerm = string.Empty;
        Products = await Http.GetJsonAsync<PagedResult<Product>>(Storage.GetItem("environment_uri") + "/product/?page=1");
        StateHasChanged();
    }

    protected void PagerPageChanged(int page)
    {
        UriHelper.NavigateTo("/product/list/" + page);
    }

    protected void AddProduct()
    {
        this.IsAdd = true;
        this.ModalTitle = "Create Product";
    }

    protected async Task UpdateProduct(string productId)
    {
        product = await Http.GetJsonAsync<Product>(Storage.GetItem("environment_uri") + "/product/" + productId);
        CurrentProductId = productId;
        this.IsAdd = true;
        this.ModalTitle = "Edit Product";
    }

    protected async Task ViewProduct(string productId)
    {
        product = await Http.GetJsonAsync<Product>(Storage.GetItem("environment_uri") + "/product/" + productId);
        CurrentProductId = productId;
        this.IsView = true;
        this.ModalTitle = "View Product";
    }

    protected async Task DeleteProduct(string productId)
    {
        product = await Http.GetJsonAsync<Product>(Storage.GetItem("environment_uri") + "/product/" + productId);
        CurrentProductId = productId;
        this.IsView = true;
        this.IsDelete = true;
        this.ModalTitle = "Delete Product";
    }

    protected async Task CreateProduct()
    {
        var token = Storage["JWT-Token"];
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        if (CurrentProductId == null)
        {
            await Http.SendJsonAsync(HttpMethod.Post, Storage.GetItem("environment_uri") + "/product", product);
        }
        else
        {
            await Http.SendJsonAsync(HttpMethod.Put, Storage.GetItem("environment_uri") + "/product/" + CurrentProductId, product);
        }
        CloseModal();
        Storage.SetItem("Transaction", "modified");
        await OnParametersSetAsync();
    }

    protected async Task RemoveProduct()
    {
        var token = Storage["JWT-Token"];
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        await Http.DeleteAsync(Storage.GetItem("environment_uri") + "/product/" + CurrentProductId);
        CloseModal();
        Storage.SetItem("Transaction", "modified");
        await OnParametersSetAsync();
    }

    protected void CloseModal()
    {
        product = new Product
        {
            Name = "",
            Id = "",
            ProductCategoryId = "",
        };
        CurrentProductId = null;
        this.IsAdd = false;
        this.IsView = false;
        this.IsDelete = false;
        StateHasChanged();
    }

}
